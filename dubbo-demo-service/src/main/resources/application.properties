# Spring boot application
spring.application.name=dubbo-demo-service
# 服务启动端口，即内置 tomcat 启动时占用的端口
server.port=8080
# log4j2 日志
logging.config=classpath:log4j2.xml
# 扫描Dubbo服务
dubbo.component.scan=com.example.dubbo.demo.service
################## Dubbo 配置中心config-center ##################
# 使用哪个配置中心：apollo、zookeeper、nacos等。
# 以zookeeper为例
# 1. 指定protocol，则address可以简化为127.0.0.1:2181；
# 2. 不指定protocol，则address取值为zookeeper://127.0.0.1:2181
dubbo.config.protocol=zookeeper
# 配置中心地址
# 取值参见protocol说明
dubbo.config.address=39.108.36.149:2181
# 当配置中心连接失败时，是否终止应用启动。
dubbo.config.check=true
# 使用Spring框架时支持，为true时，会自动从Spring Environment中读取配置。
# 默认依次读取
# key为dubbo.properties的配置
# key为dubbo.properties的PropertySource
dubbo.config.include-spring-env=true
################## Dubbo 配置中心config-center ##################
################## Dubbo 应用信息配置application ##################
# 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样，此参数不是匹配条件，你当前项目叫什么名字就填什么，和提供者消费者角色无关，比如：kylin应用调用了morgan应用的服务，则kylin项目配成kylin，morgan项目配成morgan，可能kylin也提供其它服务给别人使用，但kylin项目永远配成kylin，这样注册中心将显示kylin依赖于morgan
dubbo.application.name=dubbo-demo-service
# 当前应用的版本
dubbo.application.version=1.0.0
# 应用负责人，用于服务治理，请填写负责人公司邮箱前缀
dubbo.application.owner=yuzhenhang
# 组织名称(BU或部门)，用于注册中心区分服务来源，此配置项建议不要使用autoconfig，直接写死在配置中，比如china,intl,itu,crm,asc,dw,aliexpress等
dubbo.application.organization=platform
# Java字节码编译器，用于动态类的生成，可选：jdk或javassist
dubbo.application.compiler=javassist
# 日志输出方式，可选：slf4j,jcl,log4j,log4j2,jdk
dubbo.application.logger=slf4j
################## Dubbo 应用信息配置application ##################
################## Dubbo 注册中心配置registry ##################
# 注册中心引用BeanId，可以在<dubbo:service registry="">或<dubbo:reference registry="">中引用此ID
dubbo.registry.id=zookeeper-registry
# 注册中心服务器地址，如果地址没有端口缺省为9090，同一集群内的多个地址用逗号分隔，如：ip:port,ip:port，不同集群的注册中心，请配置多个<dubbo:registry>标签
dubbo.registry.address=39.108.36.149:2181
# 注册中心地址协议，支持dubbo, http, local三种协议，分别表示：dubbo地址、http地址、本地注册中心
dubbo.registry.protocol=zookeeper
# 注册中心请求超时时间(毫秒)
dubbo.registry.timeout=5000
# 注册中心会话超时时间(毫秒)，用于检测提供者非正常断线后的脏数据，比如用心跳检测的实现，此时间就是心跳间隔，不同注册中心实现不一样。
dubbo.registry.session=60000
# 使用文件缓存注册中心地址列表及服务提供者列表，应用重启时将基于此文件恢复，注意：两个注册中心不能使用同一文件存储
dubbo.registry.file=${user.home}/dubbo-cache/${spring.application.name}/dubbo.cache
# 注册中心不存在时，是否报错
dubbo.registry.check=true
# 注册到注册中心的URL是否采用精简模式的（与低版本兼容）
dubbo.registry.simplified=false
################## Dubbo 注册中心配置registry ##################
################## Dubbo 元数据中心配置metadata-report ##################
dubbo.metadata-report.address=zookeeper://39.108.36.149:2181
################## Dubbo 元数据中心配置metadata-report ##################
################## Dubbo 监控中心配置monitor ##################
# 监控中心协议，如果为protocol="registry"，表示从注册中心发现监控中心地址，否则直连监控中心。
#dubbo.monitor.protocol=registry
# 直连监控中心服务器地址，address="10.20.130.230:12080"
#dubbo.monitor.address=zookeeper://39.108.36.149:2181
################## Dubbo 监控中心配置monitor ##################
################## Dubbo 服务提供者协议配置protocol ##################
# 协议BeanId，可以在<dubbo:service protocol="">中引用此ID，如果ID不填，缺省和name属性值一样，重复则在name后加序号。
dubbo.protocol.id=dubbo
# 协议名称
dubbo.protocol.name=dubbo
# 服务端口 dubbo协议缺省端口为20880，rmi协议缺省端口为1099，http和hessian协议缺省端口为80；如果没有配置port，则自动采用默认端口，如果配置为-1，则会分配一个没有被占用的端口。Dubbo 2.4.0+，分配的端口在协议缺省端口的基础上增长，确保端口段可控。
dubbo.protocol.port=-1
# 服务主机名，多网卡选择或指定VIP及域名时使用，为空则自动查找本机IP，-建议不要配置，让Dubbo自动获取本机IP
#dubbo.protocol.host=
# 设为true，将向logger中输出访问日志，也可填写访问日志文件路径，直接把访问日志输出到指定文件
dubbo.protocol.accesslog=${user.home}/dubbo-log/${spring.application.name}.log
################## Dubbo 服务提供者协议配置protocol ##################