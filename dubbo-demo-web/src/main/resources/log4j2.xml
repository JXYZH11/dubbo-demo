<?xml version="1.0" encoding="UTF-8"?>
<!-- 设置log4j2的自身log级别为warn -->
<!-- OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出。 -->
<!-- monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数。 -->
<Configuration status="INFO" monitorInterval="5">
    <!--先定义所有的appender -->
    <Appenders>
        <!--这个输出控制台的配置 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <!-- <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/> -->
            <!--这个都知道是输出日志的格式 -->
            <PatternLayout
                    pattern="%d{yyyy-MM-dd HH:mm:ss} %-5level %t %logger{36} %L - %msg%n"/>
        </Console>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 -->
        <File name="File" fileName="${user.home}/dubbo-log/${spring.application.name}-file.log"
              append="false">
            <PatternLayout
                    pattern="%d{yyyy-MM-dd HH:mm:ss} %-5level %t %logger{36} %L - %msg%n"/>
        </File>

        <!-- 按天备份日志 -->
        <RollingFile name="RollingFileByDay"
                     fileName="${user.home}/dubbo-log/${spring.application.name}-rollingFileByDay.log"
                     filePattern="${user.home}/dubbo-log/${spring.application.name}-$${date:yyyyMM}/$${date:dd}/%d{dd}_%i.log">
            <PatternLayout
                    pattern="%d{yyyy-MM-dd HH:mm:ss} %-5level %t %logger{36} %L - %msg%n"/>
            <Policies>
                <CronTriggeringPolicy schedule="0 0 * * * ?"/>
                <!-- <SizeBasedTriggeringPolicy size="1024 MB" /> -->
            </Policies>
            <!-- <Policies>
                多长时间滚动一次
                <TimeBasedTriggeringPolicy interval="1 hour" />
                一个日志文件的最大大小
                <SizeBasedTriggeringPolicy size="1024 MB" />
            </Policies> -->
            <DefaultRolloverStrategy max="24"/>   <!-- 文件夹下最多的文件个数 -->
        </RollingFile>
    </Appenders>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
    <Loggers>
        <!--建立一个默认的root的logger -->
        <Root level="ERROR">
            <appender-ref ref="Console"/>
        </Root>
        <Logger name="com" level="DEBUG">
            <appender-ref ref="File"/>
            <appender-ref ref="RollingFileByDay"/>
        </Logger>
        <!--<Logger name="org" level="DEBUG">
            <appender-ref ref="File"/>
            <appender-ref ref="RollingFileByDay"/>
        </Logger>-->
    </Loggers>
</Configuration>